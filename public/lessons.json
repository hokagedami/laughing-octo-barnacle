[
  {
    "code": "LG101",
    "title": "Introduction to Logic Gates",
    "content": {
      "title": "Understanding the Basics of Logic Gates",
      "paragraphs": [
        "Logic gates are the fundamental building blocks of digital circuits. They perform basic logical operations on binary inputs to produce a single binary output.",
        "In this course, we will focus on three essential logic gates: AND, OR, and NOT. These gates form the foundation for more complex digital systems and are crucial in computer science and electronics.",
        "Each lesson will explore the functionality, truth tables, and real-world applications of these gates, providing you with a solid understanding of digital logic."
      ],
      "tables": [
        {
          "title": "Basic Logic Gates",
          "columns": ["Gate", "Inputs", "Output"],
          "data": [
            ["AND", "2 or more", "1"],
            ["OR", "2 or more", "1"],
            ["NOT", "1", "1"]
          ]
        }
      ]
    }
  },
  {
    "code": "LG102",
    "title": "The AND Gate",
    "content": {
      "title": "Understanding and Using the AND Gate",
      "paragraphs": [
        "The AND gate is a basic logic gate that implements logical conjunction. It behaves according to the AND truth table.",
        "An AND gate only outputs a high (1) when all of its inputs are high. In all other cases, it outputs a low (0).",
        "AND gates are commonly used in circuits that need to check if multiple conditions are true simultaneously."
      ],
      "images": [
        "/public/images/And Gate Image.png"
      ],
      "tables": [
        {
          "title": "AND Gate Truth Table",
          "columns": ["Input A", "Input B", "Output"],
          "data": [
            ["0", "0", "0"],
            ["0", "1", "0"],
            ["1", "0", "0"],
            ["1", "1", "1"]
          ]
        }
      ]
    }
  },
  {
    "code": "LG103",
    "title": "The OR Gate",
    "content": {
      "title": "Understanding and Using the OR Gate",
      "paragraphs": [
        "The OR gate is a logic gate that implements logical disjunction. It follows the OR truth table.",
        "An OR gate outputs a high (1) when at least one of its inputs is high. It only outputs a low (0) when all inputs are low.",
        "OR gates are useful in circuits where you need to check if at least one of several conditions is true."
      ],
      "images": [
        "/public/images/Or Gate Image.png"
      ],
      "tables": [
        {
          "title": "OR Gate Truth Table",
          "columns": ["Input A", "Input B", "Output"],
          "data": [
            ["0", "0", "0"],
            ["0", "1", "1"],
            ["1", "0", "1"],
            ["1", "1", "1"]
          ]
        }
      ]
    }
  },
  {
    "code": "LG104",
    "title": "The NOT Gate",
    "content": {
      "title": "Understanding and Using the NOT Gate",
      "paragraphs": [
        "The NOT gate, also known as an inverter, is a logic gate that implements logical negation. It has a single input and output.",
        "A NOT gate outputs the opposite of its input: when the input is high (1), the output is low (0), and vice versa.",
        "NOT gates are essential for creating complementary signals and are often used in combination with other gates to create more complex logic functions."
      ],
      "images": [
        "/public/images/Not Gate Image.png"
      ],
      "tables": [
        {
          "title": "NOT Gate Truth Table",
          "columns": ["Input", "Output"],
          "data": [
            ["0", "1"],
            ["1", "0"]
          ]
        }
      ]
    }
  },
  {
    "code": "LG105",
    "title": "Combining AND and OR Gates",
    "content": {
      "title": "Creating Complex Logic with AND and OR Gates",
      "paragraphs": [
        "By combining AND and OR gates, we can create more complex logical operations and decision-making circuits.",
        "These combinations allow us to implement functions that require multiple conditions to be checked simultaneously or alternatively.",
        "Understanding how to combine these gates is crucial for designing larger digital systems and solving real-world logical problems."
      ],
      "tables": [
        {
          "title": "Example: (A AND B) OR C",
          "columns": ["A", "B", "C", "Output"],
          "data": [
            ["0", "0", "0", "0"],
            ["0", "0", "1", "1"],
            ["0", "1", "0", "0"],
            ["0", "1", "1", "1"],
            ["1", "0", "0", "0"],
            ["1", "0", "1", "1"],
            ["1", "1", "0", "1"],
            ["1", "1", "1", "1"]
          ]
        }
      ]
    }
  },
  {
    "code": "LG106",
    "title": "Using NOT Gates with AND and OR",
    "content": {
      "title": "Expanding Logic Capabilities with NOT Gates",
      "paragraphs": [
        "Incorporating NOT gates with AND and OR gates greatly expands our ability to create complex logical functions.",
        "This combination allows us to create NAND, NOR, and XOR gates, which are fundamental in digital circuit design.",
        "We'll explore how negating inputs or outputs of AND and OR gates can lead to new and useful logical operations."
      ],
      "tables": [
        {
          "title": "NAND Gate Truth Table (NOT-AND)",
          "columns": ["Input A", "Input B", "Output"],
          "data": [
            ["0", "0", "1"],
            ["0", "1", "1"],
            ["1", "0", "1"],
            ["1", "1", "0"]
          ]
        }
      ]
    }
  },
  {
    "code": "LG107",
    "title": "Boolean Algebra Basics",
    "content": {
      "title": "Introduction to Boolean Algebra for Logic Gates",
      "paragraphs": [
        "Boolean algebra is the mathematical framework that underlies the operation of logic gates.",
        "We'll introduce basic Boolean operations and how they relate to AND, OR, and NOT gates.",
        "Understanding Boolean algebra is crucial for simplifying complex logical expressions and optimizing digital circuits."
      ],
      "tables": [
        {
          "title": "Basic Boolean Laws",
          "columns": ["Law", "AND Example", "OR Example"],
          "data": [
            ["Commutative", "A·B = B·A", "A+B = B+A"],
            ["Associative", "A·(B·C) = (A·B)·C", "A+(B+C) = (A+B)+C"],
            ["Distributive", "A·(B+C) = A·B + A·C", "A+(B·C) = (A+B)·(A+C)"]
          ]
        }
      ]
    }
  },
  {
    "code": "LG108",
    "title": "Karnaugh Maps",
    "content": {
      "title": "Simplifying Logic Functions with Karnaugh Maps",
      "paragraphs": [
        "Karnaugh maps (K-maps) are a powerful tool for simplifying Boolean algebra expressions and logic circuits.",
        "We'll learn how to create and use K-maps for functions with up to four variables.",
        "This technique is invaluable for optimizing logic gate arrangements and minimizing the number of gates needed in a circuit."
      ],
      "tables": [
        {
          "title": "2-Variable K-map",
          "columns": ["A\\B", "0", "1"],
          "data": [
            ["0", "0", "1"],
            ["1", "1", "1"]
          ]
        }
      ]
    }
  },
  {
    "code": "LG109",
    "title": "Practical Applications",
    "content": {
      "title": "Real-World Applications of Logic Gates",
      "paragraphs": [
        "Logic gates are the building blocks of digital systems used in everyday technology.",
        "We'll explore practical applications of AND, OR, and NOT gates in various fields, including computer hardware, digital electronics, and control systems.",
        "Understanding these applications helps bridge the gap between theoretical knowledge and real-world implementation of logic gates."
      ],
      "tables": [
        {
          "title": "Logic Gates in Everyday Devices",
          "columns": ["Device", "Use"],
          "data": [
            ["Computer", "Arithmetic Logic Unit (ALU)"],
            ["Digital Camera", "Image Processing"],
            ["Smartphone", "Touch Screen Interface"]
          ]
        }
      ]
    }
  },
  {
    "code": "LG110",
    "title": "Building a Simple Circuit",
    "content": {
      "title": "Designing and Implementing a Basic Logic Circuit",
      "paragraphs": [
        "In this final lesson, we'll put our knowledge into practice by designing and building a simple logic circuit.",
        "We'll go through the process of translating a logical problem into a circuit design using AND, OR, and NOT gates.",
        "This hands-on experience will consolidate your understanding of logic gates and prepare you for more advanced digital design challenges."
      ],
      "tables": [
        {
          "title": "Circuit Truth Table",
          "columns": ["Sensor 1", "Sensor 2", "Override", "Alarm"],
          "data": [
            ["0", "0", "0", "0"],
            ["0", "0", "1", "1"],
            ["0", "1", "0", "1"],
            ["0", "1", "1", "1"],
            ["1", "0", "0", "1"],
            ["1", "0", "1", "1"],
            ["1", "1", "0", "1"],
            ["1", "1", "1", "1"]
          ]
        }
      ]
    }
  }
]
